kind: Kafka
apiVersion: kafka.strimzi.io/v1beta2
spec:
  entityOperator:
    topicOperator: {}
    userOperator: {}
  kafka:
    config:
      offsets.topic.replication.factor: 1
      transaction.state.log.replication.factor: 1
      transaction.state.log.min.isr: 1
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: external
        port: 9094
        tls: true
        {#if spec.features.async.kafka.url == null && isOpenShift}
        type: route
        {#else}
        type: ingress
        configuration:
          class: "{spec.features.async.kafka.ingressClassName}"
          bootstrap:
            host: "{name}-kafka.{spec.features.async.kafka.url}"
          brokers:
            - broker: 0
              host: "{name}-kafka-0.{spec.features.async.kafka.url}"
        {/if}

    {#if !spec.features.async.kafka.enableKraft}
    replicas: 1
    storage:
      type: ephemeral
    {/if}
    resources:
      {#if spec.features.async.kafka.resources.requests}
        requests:
        {#for key in spec.features.async.kafka.resources.requests.keySet()}
          {key}: {spec.features.async.kafka.resources.requests.get(key)}
        {/for}
      {/if}
      {#if spec.features.async.kafka.resources.limits}
        limits:
        {#for key in spec.features.async.kafka.resources.limits.keySet()}
          {key}: {spec.features.async.kafka.resources.limits.get(key)}
        {/for}
      {/if}
  {#if !spec.features.async.kafka.enableKraft}
  zookeeper:
    replicas: 1
    storage:
      type: ephemeral
    resources:
      {#if spec.features.async.kafka.zkResources.requests}
        requests:
          {#for key in spec.features.async.kafka.zkResources.requests.keySet()}
            {key}: {spec.features.async.kafka.zkResources.requests.get(key)}
          {/for }
      {/if}
      {#if spec.features.async.kafka.zkResources.limits}
        limits:
        {#for key in spec.features.async.kafka.zkResources.limits.keySet()}
          {key}: {spec.features.async.kafka.zkResources.limits.get(key)}
        {/for}
      {/if}
  {/if}